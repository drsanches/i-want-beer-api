#%RAML 1.0
title: I WANT BEER
version: 1.0
baseUri: https://i-want-beer-api.herokuapp.com/
description: |
  This is the API for the I WANT BEER application.

types:
  Key:
    type: string
    description: Authorization key.
  Token:
    type: string
    description: Authorization token - string "Token {key}".
  Username:
    type: string
    description: Unique string displayed to other users.
  Firstname: string
  Lastname: string
  Email:
    type: string
    description: Email tied to user account.
  Photo:
    description: User profile photo URLs.
    properties:
      big: string
      small: string
  Status:
    type: string
    enum: [NONE, WANT BEER, DRINK BEER, DRUNK]
    description: User status.
  Location:
    type: object
    description: |
      Geographic coordinates of the user, or null if not available.
    properties:
      lat:
        type: number
        description: Latitude.
      lng:
        type: number
        description: Longitude.
  MyProfile:
    type: object
    description: Authorized user information.
    properties:
      username: Username
      firstname: Firstname
      lastname: Lastname
      email: Email
      status: Status
      photo: Photo
  FriendProfile:
    type: object
    description: Friend user information.
    properties:
      username: Username
      firstname: Firstname
      lastname: Lastname
      status: Status
      photo: Photo
      location: Location
  OtherProfile:
    type: object
    description: Unknown user information.
    properties:
      username: Username
      firstname: Firstname
      lastname: Lastname
      photo: Photo

/rest-auth:
  /registration:
    post:
      description: \[NOT IMPLEMENTED\] Register a new user in the system and authorizes him.
      body:
        application/x-www-form-urlencoded:
          properties:
            username: Username
            password1: string
            password2: string
      responses:
        201:
          body:
            application/json:
              type: object
              properties:
                key: Key
        400:
          description: If some input data is incorrect.
          body:
            application/json:
              type: object
              examples:
                No username:
                  username: ["This field is required."]
                No password1:
                  password1: ["This field is required."]
                No password2:
                  password2: ["This field is required."]
                Different passwords:
                  non_field_errors: ["The two password fields didn't match."]
                Invalid password:
                  password1: ["This password is too short. It must contain at least 8 characters.", "This password is too common.", "This password is entirely numeric."]
                Existent username:
                  username: ["A user with that username already exists."]
  /login:
    post:
      description: \[NOT IMPLEMENTED\] Authorizes the user.
      body:
        application/x-www-form-urlencoded:
          properties:
            username: Username
            password: string
      responses:
        200:
          body:
            application/json:
              type: object
              properties:
                key: Key
        400:
          description: If some input data is incorrect.
          body:
            application/json:
              type: object
              examples:
                No username:
                  non_field_errors: ["Must include \"username\" and \"password\"."]
                No password:
                  password: ["This field is required."]
                Wrong password:
                  non_field_errors: ["Unable to log in with provided credentials."]
                Nonexistent username:
                  non_field_errors: ["Unable to log in with provided credentials."]
  /password/change:
    post:
      description: \[NOT IMPLEMENTED\] Changes user password.
      headers:
        Authorization: Token
      body:
        application/x-www-form-urlencoded:
          properties:
            new_password1: string
            new_password2: string
            old_password: string
      responses:
        200:
          body:
            application/json:
              type: object
              example:
                detail: "New password has been saved."
        400:
          description: If some input data is incorrect.
          body:
            application/json:
              type: object
              examples:
                No old_password:
                  old_password: ["This field is required."]
                No new_password1:
                  new_password1: ["This field is required."]
                No new_password2:
                  new_password2: ["This field is required."]
                Different new passwords:
                  new_password2: ["The two password fields didn't match."]
                Invalid password:
                  new_password2: ["This password is too short. It must contain at least 8 characters.", "This password is too common.", "This password is entirely numeric."]
                Similar username and password:
                  new_password2: ["The password is too similar to the username."]
        401:
          body:
            application/json:
              type: object
              examples:
                Invalid token:
                  detail: "Invalid token."
                No token:
                  detail: "Authentication credentials were not provided."
  /logout:
    post:
      description: \[NOT IMPLEMENTED\] Logs out the user.
      headers:
        Authorization: Token
      responses:
        200:
          body:
            application/json:
              type: object
              example:
                detail: "Successfully logged out"
        401:
          body:
            application/json:
              type: object
              examples:
                Invalid token:
                  detail: "Invalid token."
                No token:
                  detail: "Authentication credentials were not provided."
  /delete-account:
    delete:
      description: \[NOT IMPLEMENTED\] Deletes the user account.
      headers:
        Authorization: Token
      body:
        application/x-www-form-urlencoded:
          properties:
            password: string
      responses:
        200:

/user:
  get:
    description: \[NOT IMPLEMENTED\] Returns authorized user profile information.
    headers:
      Authorization: Token
    responses:
      200:
        body:
          application/json:
            type: MyProfile
  patch:
    description: \[NOT IMPLEMENTED\] Changes the profile information of the authorized user.
    headers:
      Authorization: Token
    body:
      multipart/form-data:
        properties:
          firstname?: Firstname
          lastname?: Lastname
          email?: Email
          photo?:
            type: file
            description: New user profile photo.
    responses:
      200:
  /{friend-username}:
    get:
      description: \[NOT IMPLEMENTED\] Returns a user profile information for friend with username = friend-username.
      headers:
        Authorization: Token
      responses:
        200:
          body:
            application/json:
              type: FriendProfile
    delete:
      description: \[NOT IMPLEMENTED\] Removes friend with username = friend-username from friend list.
      headers:
        Authorization: Token
      responses:
        200:
  /{other-username}:
    get:
      description: \[NOT IMPLEMENTED\] Returns a user profile information for unknown user with username = other-username.
      headers:
        Authorization: Token
      responses:
        200:
          body:
            application/json:
              type: OtherProfile
    post:
      description: \[NOT IMPLEMENTED\] Sends or ac—Åepts new friend request to a user with username = other-username.
      headers:
        Authorization: Token
      responses:
        200:
    delete:
        description: \[NOT IMPLEMENTED\] Declines friend request from / to a user with username = other-username.
      headers:
        Authorization: Token
      responses:
        200:

/i-want-beer:
  post:
    description: \[NOT IMPLEMENTED\] Changes authorized user status.
    headers:
      Authorization: Token
    body:
      application/x-www-form-urlencoded:
        properties:
          location: Location
    responses:
      200:

/friends:
  get:
    description: \[NOT IMPLEMENTED\] Returns a list of friend profile information.
    headers:
      Authorization: Token
    responses:
      200:
        body:
          application/json:
            type: FriendProfile[]
  /map:
    get:
      description: \[NOT IMPLEMENTED\] Returns a list of friend profile information displayed on a map.
      headers:
        Authorization: Token
      responses:
        200:
          body:
            application/json:
              type: FriendProfile[]
  /find:
    get:
      description: \[NOT IMPLEMENTED\] Searches for users matching the search query.
      headers:
        Authorization: Token
      body:
        application/x-www-form-urlencoded:
          properties:
            search:
              type: string
              description: Search query.
      responses:
        200:
          body:
            application/json:
              type: OtherProfile[]
  /requests:
    get:
      description: \[NOT IMPLEMENTED\] Returns a list of profile information of users who sent a friend request to the authorized user.
      headers:
        Authorization: Token
      responses:
        200:
          body:
            application/json:
              type: OtherProfile[]
